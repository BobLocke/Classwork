package crypto;

import java.util.Random;
import java.util.Scanner;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class crypto {
	
	// x = a ^ b % c
	private static long powMod(long a, long b, long c){
		long x = 1;
		a = a % c;
		
		while (b > 0){
			if (b % 2 == 1){
				x = (x*a)%c;
			}
			b = b >> 1;
			a = (a*a)%c;
		}
		return x;
	}	
	
	//algorithm modified from wikipedia
	private static boolean millerRabin(long n, int d){
		long q = n - 1;
		int k = 0;
		Random rand = new Random();
		
		
		while(q % 2 == 0){
			k += 1;	
			q /= 2;
		}
		
		for (int i = 0; i < d; i++){
			long a = Math.abs(rand.nextLong()) % (n-2) + 2;
			//System.out.println("Iteration: " + i +" Test Value a: " + a);
			long x = powMod(a, q, n);
			if ((x == 1) || (x==(n-1))){
				continue;
			}
			for (int j = 0; j < k - 1; j++){
				x = (x*x)%n;
				if (x == 1) return false;
				if (x == (n - 1)) break;
			} 
			if (x == (n - 1)) continue;
			return false;
		}		
		return true;
	}
	
	// Generic try/catch block for writing a string to file
	private static void writeKeyToFile(String pubkey, String filename){
		PrintWriter out = null;
		try {
			out = new PrintWriter(filename);
			if (pubkey != "")
			out.println(pubkey);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} finally{
			out.close();
		}
		return;
	}
	// borrowed from StackOverflow
	private static void appendTextToFile(String string, String filename) {
		try {
		    BufferedWriter out = new BufferedWriter(new FileWriter(filename, true));
		    out.write("Hello ");
		    out.close();
		} catch (IOException e) {
		    //exception handling left as an exercise for the reader
		}
		
	}	
	
	private static byte[] readTextFromFile(String filename){
		byte[] res = null;
		try {
			Path path = Paths.get(filename);
			res = Files.readAllBytes(path);
		} catch(IOException e){
			e.printStackTrace();
		}
		return res;
	}
	
	private static long[] readKey(String filename){
		String in = null;
		try {
			in = new Scanner(new File(filename)).useDelimiter("\\Z").next();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String[] spl = in.replace("/n", " ").split(" ");
		long[] res = new long[3];
		for(int i = 0; i < 3; i++){
			res[i] = Long.valueOf(spl[i]);
		}
		
		return res;
		
	}
	
	private static long[] readLongFromFile(String filename){
		String in = null;
		try {
			in = new Scanner(new File(filename)).useDelimiter("\\Z").next();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String[] spl = in.split("\\W+");
		//System.out.println(spl[0]);
		long[] res = new long[spl.length];
		for(int i = 0; i < res.length; i++){
			res[i] = Long.valueOf(spl[i]);
		}
		
		return res;
		
	}

	public static void main(String args[]){
		int ITERS = 40;
		long max = 0x7FFFFFFF;
		long min = 0x40000000;
		Scanner in = new Scanner(System.in);
		
		
		while(true){
			System.out.println("(1) Keygen, (2) Encrypt, (3) Decrypt?, or (9) Quit");
			int mode = in.nextInt();
			System.out.println("Input: " + mode);
			if (mode == 1){
				System.out.println("Keygen: Please input seed:");
				long seed = in.nextLong();
				Random r = new Random(seed);
				BigInteger p = new BigInteger(31, r);				
				long q = Math.abs(p.longValue());
				long prime = 16;
				while(millerRabin(prime, ITERS) == false){
					//System.out.println("p: " + prime + " is not prime.");
					q = q % (max - min) + min;
					while (q % 12 != 5) {
						p = new BigInteger(31, r);
						q = Math.abs(p.longValue());				
						q = q % (max - min) + min;
					}
					//System.out.println("Testing q for primality: " + q + "...");
					while(millerRabin(q, ITERS) == false){
							//System.out.println("q: " + q + " is not prime.");
							p = new BigInteger(31, r);
							q = Math.abs(p.longValue());				
							q = q % (max - min) + min;
							while (q % 12 != 5) {
								p = new BigInteger(31, r);
								q = Math.abs(p.longValue());				
								q = q % (max - min) + min;
							}
							//System.out.println("Testing q for primality: " + q + "...");
						}
					
					prime = 2 * q + 1;
					//System.out.println("Testing p for primality: " + prime + "...");					
				}
				
				
					System.out.println(prime + " is probably prime and q is 12 % 5: " + (millerRabin(prime, ITERS) & (((prime -1)/2)%12 == 5)));
					System.out.println("Generating keys...");	
					long d = Math.abs(r.nextLong()) % (prime-2) + 1;
					long e = powMod(2, d, prime);
					String pubkey = prime + " 2 " + e;
					String prikey = prime + " 2 " + d;
					System.out.println("Public key: " + pubkey);
					System.out.println("Private key: " + prikey);
					writeKeyToFile(pubkey, "pubkey.txt");
					writeKeyToFile(prikey, "prikey.txt");
					
					
					
			} else if (mode == 2){
				Random r = new Random();
				long e, p, g, k, C1, C2;
				BigInteger block = null;
				BigInteger z = null;
				byte[] b = new byte[4];
				int index = 0;
				g = 2;
				long[] temp = readKey("pubkey.txt");
				e = temp[2];
				p = temp[0];
				//System.out.println("Public key: " + p + ", 2, " + e);
				System.out.println("Encrypting...");
				writeKeyToFile("", "ctext.txt");
				byte[] ptext = readTextFromFile("ptext.txt");
				//System.out.println("ptext: " + new String(ptext));
				

				while (index < ptext.length){
					b[index%4] = ptext[index];
					if(index%4 == 3){
						
						block = new BigInteger(b);
						//byte[] test = block.toByteArray();
						//System.out.println("b: " + new String(b));
						//System.out.println("Block: " + new String(test));
						z = new BigInteger(31, r);
						k = Math.abs(z.longValue()) % (p-1) + 1;
						C1 = powMod(2, k, p);
						C2 = (powMod(e, k, p) * (block.mod(BigInteger.valueOf(p)).longValue())%p);
						System.out.println(C1 + ", " + C2);
						appendTextToFile(String.valueOf(C1) + " " + String.valueOf(C2) + "\n", "ctext.txt");
					}	
					index++;
				}
				if (index%4 == 1){
					b[1] = 0;
					b[2] = 0;
					b[3] = 0;
				} else if (index%4 == 2){
					b[2] = 0;
					b[3] = 0;
				} else if (index%4 == 3){
					b[3] = 0;		
				}
				
				if (index%4 != 0){
					block = new BigInteger(b);
					z = new BigInteger(31, r);
					k = Math.abs(z.longValue()) % (p-1) + 1;
					C1 = powMod(2, k, p);
					C2 = (powMod(e, k, p) * (block.mod(BigInteger.valueOf(p)).longValue())%p);
					System.out.println(C1 + ", " + C2);
					appendTextToFile(String.valueOf(C1) + " " + String.valueOf(C2) + "\n", "ctext.txt");
				}
				//byte[] test = block.toByteArray();
				//System.out.println("b: " + new String(b));
				//System.out.println("Block: " + new String(test));
				
				
				
			} else if (mode == 3){
				System.out.println("Decrypting...");
				writeKeyToFile("", "dtext.txt");
				Random r = new Random();
				long d, p, g, k, C1, C2;
				BigInteger m;
				long[] temp = readKey("prikey.txt");
				d = temp[2];
				p = temp[0];
				temp = readLongFromFile("ctext.txt");
				//System.out.println(temp);
				for (int i = 0; i < temp.length; i+=2){
					C1 = temp[i];
					C2 = temp[i+1];
					//System.out.print(C1 + ", " + C2);
					m = BigInteger.valueOf((powMod(C1, (p - 1- d), p) * (C2 % p)) % p);
					System.out.print(new String(m.toByteArray()));
					appendTextToFile(new String(m.toByteArray()), "ptext2.txt");
				}
				System.out.println("");
				//appendTextToFile("\n", "ptext2.txt");
				
	
			}else if (mode == 9){
				System.out.println("Bye!");
				in.close();
				return;
			} else {
				System.out.println(mode + " is not a valid option.");
			}
		}
	}
}
